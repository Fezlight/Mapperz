variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# This template uses jdk8 for verifying and deploying images
image: maven:3.8.3-ibmjava-8-alpine

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - test
  - release
  - deploy

  # Verify merge requests using JDK8
verify:jdk8:
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
    - awk -F"," '{ lines += $8 + $9; covered += $9 } END { print covered, "/", lines, "lines covered"; print 100*covered/lines, "% covered" }' target/site/jacoco/jacoco.csv || echo "0.0 % covered"
  coverage: '/\d+.*\d+ \% covered/'
  artifacts:
    when: always
    reports:
      dotenv: variables.env
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml

maven-release:
  stage: release
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client git )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add - > /dev/null
    - mkdir -m 700 -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.email "alex_se@hotmail.fr"
    - git config --global user.name "Gitlab Agent"
  script:
    - git checkout -B "$CI_BUILD_REF_NAME"
    - mvn release:prepare -Dmaven.test.skip=true -s ci_settings.xml -B
    - mvn release:perform -Dmaven.test.skip=true -s ci_settings.xml -B
  needs:
    - "verify:jdk8"
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - when: never

gitlab-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating tag for version v$CI_COMMIT_TAG..."
  release:
    name: 'Release v$CI_COMMIT_TAG'
    description: 'Release bundle related to v$CI_COMMIT_TAG'
    tag_name: 'v$CI_COMMIT_TAG'
  rules:
    - if: $CI_COMMIT_TAG
    - when: never

deploy:jdk8:
  stage: deploy
  script:
    - 'mvn $MAVEN_CLI_OPTS deploy -Dmaven.test.skip=true -s ci_settings.xml'
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
